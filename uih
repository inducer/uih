#! /usr/bin/env python

from __future__ import annotations

import re
from dataclasses import dataclass
from functools import partial
from typing import TYPE_CHECKING, ClassVar

import six
import urwid
from typing_extensions import override


if TYPE_CHECKING:
    from collections.abc import Sequence


def transform(s: str):
    def replace_entity(match: re.Match[str]):
        from html.entities import name2codepoint

        try:
            return six.unichr(name2codepoint[match.group(1)])
        except KeyError:
            return match.group(0)

    s = re.sub(r"(?<!\\)\\([A-Za-z0-9]+)\;?", replace_entity, s)

    return s


@dataclass
class CharInfo:
    names: Sequence[str]
    groups: Sequence[str]
    codepoint: int
    crossrefs: Sequence[str]
    unichar: str = ""

    search_names: Sequence[str] = ()

    def __post_init__(self):
        self.unichar = chr(self.codepoint)
        self.search_names = [
                name.lower() for name in self.names
            ] + [
                grp.lower() for grp in self.groups
            ]


def read_names_list():
    result: list[CharInfo] = []

    namelist_filename = "/tmp/NamesList.txt.gz"

    import gzip
    from os.path import exists

    if not exists(namelist_filename):
        print("one second... fetching unicode names list...")
        from urllib.request import urlopen

        nl = urlopen("http://www.unicode.org/Public/6.1.0/ucd/NamesList.txt").read()
        with gzip.open(namelist_filename, "w") as outf:
            outf.write(nl)

    with gzip.open(namelist_filename, "r") as inf:
        uncompressed_nl = inf.read().decode("utf-8", errors="replace")

    lines = uncompressed_nl.split("\n")
    while not lines[-1]:
        lines.pop()

    it = iter(enumerate(lines))

    hex_set = "0123456789ABCDEF"
    whitespace = " \t"

    print("one second... reading unicode names list...")
    current_group = ""
    try:
        lineno, ln = six.next(it)

        while True:
            assert ln
            if ln[0] == "@":
                words = ln.split()
                if words[0] == "@":
                    current_group = " ".join(words[1:])
                    lineno, ln = six.next(it)
                elif words[0].endswith("+"):
                    while True:
                        lineno, ln = six.next(it)
                        if ln[0] not in whitespace:
                            break
                else:
                    lineno, ln = six.next(it)
            elif ln[0] in whitespace:
                lineno, ln = six.next(it)
            elif ln[0] in hex_set:
                words = ln.split()
                codepoint = int(words[0], base=16)
                names = [" ".join(words[1:])]
                crossrefs: list[str] = []
                # print(hex(codepoint), names[0])

                while True:
                    lineno, ln = six.next(it)

                    if ln[0] not in whitespace:
                        break

                    words = ln.split()
                    if words[0] in ["=", "%"]:
                        names.append(" ".join(words[1:]))
                    elif words[0] in ["x"]:
                        crossrefs.append(" ".join(words[1:]))
                    elif words[0] in ["*", "#", ":"]:
                        pass  # ignore
                    else:
                        raise ValueError(
                            "parsing unicode names list: not sure what "
                            "to do with line %d" % (lineno + 1)
                        )
                result.append(
                    CharInfo(
                        names=names,
                        groups=[current_group],
                        codepoint=codepoint,
                        crossrefs=crossrefs,
                    )
                )
            else:
                raise ValueError(
                    "parsing unicode names list: not sure "
                    "what to do with line %d" % (lineno + 1)
                )

    except StopIteration:
        pass

    return result


names_list = read_names_list()


class UniCharWidget(urwid.Widget):
    _sizing: ClassVar[frozenset[urwid.Sizing]] = frozenset([urwid.Sizing.FLOW])

    char_info: CharInfo
    collapsed: bool = True

    def __init__(self, char_info: CharInfo):
        self.char_info = char_info
        self.collapsed = True
        super().__init__()

    @override
    def selectable(self):
        return True

    def rows(self, maxcol_tup, focus=False):
        return 1

    def _make_canvas(self, text, attr_str, maxcol):
        attr = [
            (attr_str, len(text)),
        ]

        diff = maxcol - len(text)
        if diff > 0:
            text += " " * diff
            attr.append((attr_str, diff))
        else:
            from urwid.util import rle_subseg

            text = text[:maxcol]
            attr = rle_subseg(attr, 0, maxcol)

        from urwid.util import apply_target_encoding

        txt, cs = apply_target_encoding(text)

        return urwid.TextCanvas([txt], [attr], [cs], maxcol=maxcol)

    @override
    def render(self, maxcol_tup, focus=False):
        (maxcol,) = maxcol_tup
        apfx = "focused " if focus else ""

        attr = apfx + "unichar"

        try:
            from unicodedata import combining

            uchar = self.char_info.unichar
            if combining(uchar):
                uchar = "A" + uchar
            return self._make_canvas(
                uchar + " " + self.char_info.names[0], attr, maxcol
            )
        except urwid.canvas.CanvasError:
            return self._make_canvas("(ERROR) " + self.char_info.names[0], attr, maxcol)

    def keypress(self, size, key):
        return key


def get_uc_list(filter_expr: str):
    words = [word for word in filter_expr.lower().split() if word]

    last_group = None

    result: list[urwid.Widget] = []

    for ci in names_list:
        match = True
        for word in words:
            if not any(word in sn for sn in ci.search_names):
                match = False
                break

        if match:
            if ord(ci.unichar) < 32:
                continue

            cigrp = ci.groups[0]
            if cigrp != last_group:
                result.append(
                    urwid.AttrWrap(
                        urwid.Text(" - %s -" % cigrp),
                        "group header",
                        "focused group header",
                    )
                )

            result.append(UniCharWidget(ci))

            last_group = cigrp

    return result


def run(ui):
    cols, rows = ui.get_cols_rows()

    pre = urwid.Edit()
    pre_wrap = urwid.AttrWrap(pre, "input")
    post = urwid.Text("")

    uc_filt = urwid.Edit()
    uc_filt_wrap = urwid.AttrWrap(uc_filt, "input")
    uc_list_walker = urwid.SimpleListWalker([])

    uc_listbox = urwid.ListBox(uc_list_walker)
    uc_list_wrap = urwid.AttrWrap(uc_listbox, "input")

    main_pile = urwid.Pile([
        (
            "flow",
            urwid.AttrWrap(
                urwid.Text(
                    "Mathy Unicode Input Helper (C) Andreas Kloeckner 2009",
                    align="center",
                ),
                "title",
            ),
        ),
        ("fixed", 1, urwid.SolidFill()),
        ("flow", urwid.Text("Text to transform?")),
        ("flow", pre_wrap),
        ("flow", urwid.Text("Transformed text:")),
        ("flow", urwid.AttrWrap(post, "result")),
        ("fixed", 1, urwid.SolidFill()),
        ("flow", urwid.Text("Filter for list of Unicode characters:")),
        ("flow", uc_filt_wrap),
        ("fixed", 1, urwid.SolidFill()),
        ("weight", 1, uc_list_wrap),
    ])

    w = urwid.AttrWrap(
        urwid.LineBox(
            urwid.Columns([
                ("fixed", 1, urwid.SolidFill()),
                main_pile,
                ("fixed", 1, urwid.SolidFill()),
            ]),
        ),
        "background",
    )

    last_search = uc_filt.get_edit_text()
    uc_list_walker[:] = get_uc_list(last_search)

    while True:
        canvas = w.render((cols, rows), focus=True)
        ui.draw_screen((cols, rows), canvas)

        keys = ui.get_input()
        for k in keys:
            if k == "window resize":
                cols, rows = ui.get_cols_rows()
                continue
            elif k == "f" and main_pile.focus == uc_list_wrap:
                main_pile.focus = uc_filt_wrap
            elif k == "tab":
                if main_pile.focus == uc_list_wrap:
                    main_pile.focus = pre_wrap
                elif main_pile.focus == pre_wrap:
                    main_pile.focus = uc_list_wrap
            elif k == "esc":
                return pre.get_edit_text(), transform(pre.get_edit_text())
            elif k == "+":
                if main_pile.focus == uc_list_wrap:
                    ucw = uc_listbox.focus
                    pre.insert_text(ucw.char_info.unichar)
            elif k == "enter":
                if main_pile.focus == uc_list_wrap:
                    ucw = uc_listbox.focus
                    pre.insert_text(ucw.char_info.unichar)
                    main_pile.focus = pre_wrap
                elif main_pile.focus == uc_filt_wrap:
                    main_pile.focus = uc_list_wrap
            elif w.selectable():
                w.keypress((cols, rows), k)
                if uc_filt.get_edit_text() != last_search:
                    last_search = uc_filt.get_edit_text()
                    uc_list_walker[:] = get_uc_list(last_search)

        post.set_text(transform(pre.get_edit_text()))


def main():
    ui = urwid.curses_display.Screen()
    ui.register_palette([
        ("input", "black", "dark cyan"),
        ("background", "black", "light gray"),
        ("result", "light gray", "black"),
        ("title", "white", "dark blue"),
        ("unichar", "black", "dark cyan"),
        ("focused unichar", "black", "dark green"),
        ("group header", "light gray", "dark cyan"),
        ("focused group header", "light gray", "dark green"),
    ])

    pre, post = ui.run_wrapper(partial(run, ui))
    print("Untransformed:")
    print("  ", pre)
    print("Transformed:")
    print("  ", post)


if __name__ == "__main__":
    main()
